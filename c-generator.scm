(require scheme)

(define (interleave xs sep)
  (cond ((null? xs) "")
        ((null? (cdr xs)) (car xs))
        (else (string-append (string-append (car xs) sep) (interleave (cdr xs) sep)))))
(define (flatten-str str)
  (interleave str ""))


(define (c-program . statements)
  (string-append (interleave statements ";\n") ";"))

(define (c-block . statements)
  (string-append "{\n" (apply c-program statements) "\n}"))


(define (c-#include file #:local (local? #f))
  (string-append "#include " (if local?
                                 (string-append "\"" file "\"")
                                 (string-append "<" file ">"))
                 "\n"))
(define (c-#ifdef mac then (els #f))
  (string-append "#ifdef " mac "\n" then "\n" (if els (string-append "#else\n" els "\n") "") "#endif"))
(define (c-#ifndef mac then (els #f))
  (string-append "#ifndef " mac "\n" then "\n" (if els (string-append "#else\n" els "\n") "") "#endif"))
(define (c-#if pred then (els #f))
  (string-append "#if " pred "\n" then "\n" (if els (string-append "#else\n" els "\n") "") "#endif"))

(define (c-#define-obj name (val ""))
  (string-append "#define " name " " val))
(define (c-#define-fun name args expans)
  (string-append "#define " name "(" (interleave args ", ") ") " expans))
(define (c-#undef name)
  (string-append "#undef " name))

(define (c-# tok)
  (string-append "#" tok))
(define (c-## a b)
  (string-append a "##" b))

(define (c-fun-decl type name params)
  (string-append type " " name " (" (interleave params ", ") ")"))
(define (c-fun-defn type name params . body)
  (string-append type " " name " (" (interleave params ", ") ")\n{\n"
                 (interleave body ";\n") ";\n}"))

(define (c-var-decl type name)
  (string-append type " " name))

(define (c-struct-decl name . members)
  (string-append "struct " name "\n{\n" (flatten-str (map (lambda (str) (string-append str ";\n")) members)) "}"))
(define (c-enum-decl name . constants)
  (string-append "enum " name " { " (interleave constants ", ") "}"))
(define (c-union-decl name . members)
  (string-append "union " name "\n{\n" (flatten-str (map (lambda (str) (string-append str ";\n")) members)) "}"))

(define (c-typedef-var orig new)
  (string-append "typedef " orig " " new))
(define (c-typedef-fn ret name . args)
  (string-append "typedef " ret " " name "(" (interleave args ", ") ")"))
(define (c-extern decl)
  (string-append "extern " decl))
(define (c-static type)
  (string-append "static " type))
(define (c-volatile type)
  (string-append "volatile " type))
(define (c-const type)
  (string-append "const " type))
(define (c-signed type)
  (string-append "signed " type))
(define (c-unsigned type)
  (string-append "unsigned " type))
(define (c-short type)
  (string-append "short " type))
(define (c-long type)
  (string-append "long " type))
(define (c-bitfield name bits)
  (string-append name ":" bits))
(define (c-struct tag)
  (string-append "struct " tag))
(define (c-enum tag)
  (string-append "enum " tag))
(define (c-union tag)
  (string-append "union " tag))
(define (c-pointer-type type)
  (string-append type "*"))
(define (c-array name (dim ""))
  (string-append name "[" dim "]"))

(define (c-struct-init . members)
  (string-append "{ " (interleave members ", ") " }"))
(define (c-struct-named-init . members)
  (string-append "{ " (interleave (map 
                                   (lambda (str) (string-append "." (substring str 1 (- (string-length str) 1))))
                                   members) ", ")
                 " }"))

(define (c-= place val)
  (string-append "(" place " = " val ")"))
(define (c-call fn . args)
  (string-append fn "(" (interleave args ", ") ")"))
(define (c-subscript array index)
  (string-append "(" array "[" index "])"))
(define (c-deref ptr)
  (string-append "(*" ptr ")"))
(define (c-ref var)
  (string-append "(&" var ")"))
(define (c--> struct slot)
  (string-append "(" struct " -> " slot ")"))
(define (c-. struct slot)
  (string-append "(" struct " . " slot ")"))
(define (c-cast type val)
  (string-append "((" type ") " val ")"))
(define (c-comma a b)
  (string-append "(" a " , " b ")"))
(define (c-cond pred t f)
  (string-append "(" pred " ? " t " : " f ")"))
(define (c-sizeof-var var)
  (string-append "(sizeof " var ")"))
(define (c-sizeof-type type)
  (string-append "(sizeof (" type "))"))


(define (c-> a b)
  (string-append "(" a " > " b ")"))
(define (c->= a b)
  (string-append "(" a " >= " b ")"))
(define (c-== a b)
  (string-append "(" a " == " b ")"))
(define (c-!= a b)
  (string-append "(" a " != " b ")"))
(define (c-<= a b)
  (string-append "(" a " <= " b ")"))
(define (c-< a b)
  (string-append "(" a " < " b ")"))
(define (c-+ x y)
  (string-append "(" x " + " y ")"))
(define (c-- x y)
  (string-append "(" x " - " y ")"))
(define (c-* x y)
  (string-append "(" x " * " y ")"))
(define (c-/ x y)
  (string-append "(" x " / " y ")"))
(define (c-% x y)
  (string-append "(" x " % " y ")"))

(define (c-log-and a b)
  (string-append "(" a " && " b ")"))
(define (c-log-or a b)
  (string-append "(" a " || " b ")"))
(define (c-! p)
  (string-append "(!" p ")"))

(define (c-<< a b)
  (string-append "(" a " << " b ")"))
(define (c->> a b)
  (string-append "(" a " >> " b ")"))
(define (c-~ a)
  (string-append "(~" a ")"))
(define (c-bit-and a b)
  (string-append "(" a " & " b ")"))
(define (c-bit-or a b)
  (string-append "(" a " | " b ")"))
(define (c-bit-xor a b)
  (string-append "(" a " ^ " b ")"))

(define (c-pre-++ var)
  (string-append "(++" var ")"))
(define (c-pre--- var)
  (string-append "(--" var ")"))
(define (c-post-++ var)
  (string-append "(" var "++)"))
(define (c-post--- var)
  (string-append "(" var "--)"))
(define (c-unary-+ val)
  (string-append "(+" val ")"))
(define (c-unary-- val)
  (string-append "(-" val ")"))


(define (c-return (val #f))
  (string-append "return " (if val val "")))
(define (c-break)
  "break")
(define (c-continue)
  "continue")
(define (c-goto label)
  (string-append "goto " label))
(define (c-label name)
  (string-append name ":"))
(define (c-for init pred step body)
  (string-append "for (" init "; " pred "; " step ")\n" body ";"))
(define (c-do-while pred body)
  (string-append "do\n" body "\nwhile (" pred ");"))
(define (c-while pred body)
  (string-append "while (" pred ")\n" body ";"))
(define (c-if pred then (els #f))
  (string-append "if (" pred ")\n" then (if (eq? (string-ref then 0) #\{) "" ";")
                 (if els (string-append "\nelse\n" els (if (eq? (string-ref els 0) #\{) "" ";")) "")))
(define (c-switch expr #:default (default "") . cases)
  (string-append "switch (" expr ")\n{\n" (interleave (map (lambda (cs) 
                                                             (string-append "case " (car cs) ":\n" 
                                                                            (interleave (cdr cs) ";\n") ";")) 
                                                           cases) "\n") "\ndefault:\n" default "\n}"))

(define (run-tests)
  (test-blocks)
  (test-types)
  (test-declarations)
  (test-preprocessor-directives)
  (test-operators)
  (test-statements)
  (test-program))

(define (test-blocks)
  (unless (and (string=? (c-block "x") "{\nx;\n}")
               (string=? (c-block "x" "y") "{\nx;\ny;\n}"))
    (error "test-blocks failed.")))


(define (test-program)
  (unless (string=? (c-program (c-#include "stdio.h")
                               (c-var-decl (c-static "int") "x")
                               (c-var-decl (c-static "int") "y")
                               (c-fun-defn "int" "main" (list (c-var-decl "int" "argc") 
                                                              (c-var-decl (c-pointer-type (c-pointer-type "char"))
                                                                          "argv"))
                                           (c-= "x" "5")
                                           (c-= "y" "7")
                                           (c-call "printf" "\"%d\\n\"" (c-+ "x" "y"))
                                           (c-return "0")))
                    "#include <stdio.h>\n;\nstatic int x;\nstatic int y;\nint main (int argc, char** argv)\n{\n(x = 5);\n(y = 7);\nprintf(\"%d\\n\", (x + y));\nreturn 0;\n};")
    (error "test-program failed")))


(define (test-preprocessor-directives)
  (test-c-#include)
  (test-c-#ifdef)
  (test-c-#ifndef)
  (test-c-#if)
  (test-c-#define)
  (test-c-#undef)
  (test-c-#)
  (test-c-##))

(define (test-c-#include)
  (unless (and (string=? (c-#include "stdio.h")
                         "#include <stdio.h>\n")
               (string=? (c-#include "math.h" #:local #t)
                         "#include \"math.h\"\n"))
    (error "test-c-#include failed.")))
(define (test-c-#ifdef)
  (unless (and (string=? (c-#ifdef "FISH" (c-#include "kanye.h") (c-#include "daft.h"))
                         "#ifdef FISH\n#include <kanye.h>\n\n#else\n#include <daft.h>\n\n#endif")
               (string=? (c-#ifdef "MULT" (c-#include "online.h"))
                         "#ifdef MULT\n#include <online.h>\n\n#endif"))
    (error "test-c-#ifdef failed.")))
(define (test-c-#ifndef)
  (unless (and (string=? (c-#ifndef "FISH" (c-#include "kanye.h") (c-#include "daft.h"))
                         "#ifndef FISH\n#include <kanye.h>\n\n#else\n#include <daft.h>\n\n#endif")
               (string=? (c-#ifndef "MULT" (c-#include "online.h"))
                         "#ifndef MULT\n#include <online.h>\n\n#endif"))
    (error "test-c-#ifndef failed.")))
(define (test-c-#if)
  (unless (and (string=? (c-#if "LOG_LEVEL >= LOG_DEBUG" (c-program (c-call "log" "err")))
                         "#if LOG_LEVEL >= LOG_DEBUG\nlog(err);\n#endif")
               (string=? (c-#if "USE_PINTS" (c-program (c-call "print_pints" "32"))
                                (c-program (c-call "print_litres" (c-call "pints_to_litres" "32"))))
                         "#if USE_PINTS\nprint_pints(32);\n#else\nprint_litres(pints_to_litres(32));\n#endif"))
    (error "test-c-#if failed.")))
(define (test-c-#define)
  (unless (and (string=? (c-#define-obj "GNU")
                         "#define GNU ")
               (string=? (c-#define-obj "MAX" "5")
                         "#define MAX 5")
               (string=? (c-#define-fun "MAX" '("x" "y") "((x) > (y) ? x : y)")
                         "#define MAX(x, y) ((x) > (y) ? x : y)"))
    (error "test-c-#define failed.")))
(define (test-c-#undef)
  (unless (string=? (c-#undef "WIN32")
                    "#undef WIN32")
    (error "test-c-#undef failed.")))
(define (test-c-#)
  (unless (string=? (c-# "x")
                    "#x")
    (error "test-c-# failed.")))
(define (test-c-##)
  (unless (string=? (c-## "x" "y")
                    "x##y")
    (error "test-c-## failed.")))
                    

(define (test-declarations)
  (test-c-fun-decl)
  (test-c-fun-defn)
  (test-c-var-decl)
  (test-c-struct-decl)
  (test-c-enum-decl)
  (test-c-union-decl))

(define (test-c-fun-decl)
  (unless (string=? (c-fun-decl "int" "plus" (list (c-var-decl "int" "x1") (c-var-decl "int" "x2")))
                    "int plus (int x1, int x2)")
    (error "test-c-fun-decl failed.")))

(define (test-c-fun-defn)
  (unless (string=? (c-fun-defn "int" "plus" (list "int x1" "int x2") "int res" "res = x1 + x2" "return res")
                    "int plus (int x1, int x2)\n{\nint res;\nres = x1 + x2;\nreturn res;\n}")
    (error "test-c-fun-defn failed")))

(define (test-c-var-decl)
  (unless (string=? (c-var-decl (c-static "int") "x")
                    "static int x")
    (error "test-c-var-decl failed")))

(define (test-c-struct-decl)
  (unless (and (string=? (c-struct-decl "s" (c-var-decl "int" "x") (c-var-decl "float" "y"))
                         "struct s\n{\nint x;\nfloat y;\n}")
               (string=? (c-struct-decl "s" (c-var-decl "int" "i"))
                         "struct s\n{\nint i;\n}"))
    (error "test-c-struct-decl failed.")))
(define (test-c-enum-decl)
  (unless (string=? (c-enum-decl "color" "red" "green")
                    "enum color { red, green}")
    (error "test-c-enum-decl failed.")))
(define (test-c-union-decl)
  (unless (string=? (c-union-decl "value" (c-var-decl "int" "int_val") (c-var-decl "float" "float_val"))
                         "union value\n{\nint int_val;\nfloat float_val;\n}")
    (error "test-c-union-decl failed.")))

(define (test-types)
  (test-c-typedef-var)
  (test-c-typedef-fn)
  (test-c-extern)
  (test-c-static)
  (test-c-volatile)
  (test-c-const)
  (test-c-signed)
  (test-c-unsigned)
  (test-c-short)
  (test-c-long)
  (test-c-bitfield)
  (test-c-struct)
  (test-c-enum)
  (test-c-union)
  (test-c-pointer-type)
  (test-c-array)
  (test-c-struct-init)
  (test-c-struct-named-init))

(define (test-c-typedef-var)
  (unless (string=? (c-typedef-var "int" "Apple")
                    "typedef int Apple")
    (error "test-c-typedef-var failed.")))
(define (test-c-typedef-fn)
  (unless (string=? (c-typedef-fn "int" "new_name" "int x" "int y")
                    "typedef int new_name(int x, int y)")
    (error "test-c-typedef-fn failed.")))
(define (test-c-extern)
  (unless (string=? (c-extern (c-var-decl "int" "x"))
                    "extern int x")
    (error "test-c-extern failed.")))
(define (test-c-static)
  (unless (string=? (c-static "int")
                    "static int")
    (error "test-c-static failed.")))
(define (test-c-volatile)
  (unless (string=? (c-volatile "int")
                    "volatile int")
    (error "test-c-volatile failed.")))
(define (test-c-const)
  (unless (string=? (c-const "int")
                    "const int")
    (error "test-c-const failed.")))
(define (test-c-signed)
  (unless (string=? (c-signed "int")
                    "signed int")
    (error "test-c-signed failed.")))
(define (test-c-unsigned)
  (unless (string=? (c-unsigned "int")
                    "unsigned int")
    (error "test-c-unsigned failed.")))
(define (test-c-short)
  (unless (string=? (c-short "int")
                    "short int")
    (error "test-c-short failed.")))
(define (test-c-long)
  (unless (string=? (c-long "int")
                    "long int")
    (error "test-c-long failed.")))
(define (test-c-bitfield)
  (unless (string=? (c-bitfield "tf" "1")
                    "tf:1")
    (error "test-c-bitfield failed.")))
(define (test-c-struct)
  (unless (string=? (c-struct "file")
                    "struct file")
    (error "test-c-struct failed.")))
(define (test-c-enum)
  (unless (string=? (c-enum "colors")
                    "enum colors")
    (error "test-c-enum failed.")))
(define (test-c-union)
  (unless (string=? (c-union "value")
                    "union value")
    (error "test-c-union failed.")))
(define (test-c-pointer-type)
  (unless (string=? (c-pointer-type "int")
                    "int*")
    (error "test-c-pointer-type failed.")))
(define (test-c-array)
  (unless (and (string=? (c-array "ary")
                         "ary[]")
               (string=? (c-array "ary" "5")
                         "ary[5]"))
    (error "test-c-array failed.")))

(define (test-c-struct-init)
  (unless (and (string=? (c-struct-init)
                         "{  }")
               (string=? (c-struct-init "3" "4")
                         "{ 3, 4 }"))
    (error "test-c-struct-init failed.")))
(define (test-c-struct-named-init)
  (unless (and (string=? (c-struct-named-init)
                         "{  }")
               (string=? (c-struct-named-init (c-= "x" "5") (c-= "y" "3"))
                         "{ .x = 5, .y = 3 }"))
    (error "test-c-struct-named-init failed.")))
              
                         
(define (test-operators)
  (test-c-=)
  (test-c-call)
  (test-c-subscript)
  (test-c-deref)
  (test-c-ref)
  (test-c-->)
  (test-c-.)
  (test-c-cast)
  (test-c-comma)
  (test-c-cond)
  (test-c-sizeof-type)
  (test-c-sizeof-var)
  
  (test-c->)
  (test-c->=)
  (test-c-==)
  (test-c-!=)
  (test-c-<=)
  (test-c-<)
  
  (test-c-+)
  (test-c--)
  (test-c-*)
  (test-c-/)
  (test-c-%)
  
  (test-c-log-and)
  (test-c-log-or)
  (test-c-!)
  
  (test-c-<<)
  (test-c->>)
  (test-c-~)
  (test-c-bit-and)
  (test-c-bit-or)
  (test-c-bit-xor)
  
  (test-c-pre-++)
  (test-c-post-++)
  (test-c-pre---)
  (test-c-post---)
  (test-c-unary-+)
  (test-c-unary--))

(define (test-c-=)
  (unless (string=? (c-= "x" "5")
                    "(x = 5)")
    (error "test-c-= failed.")))
(define (test-c-call)
  (unless (string=? (c-call "add" "x" "y")
                    "add(x, y)")
    (error "test-c-call-failed.")))
(define (test-c-subscript)
  (unless (string=? (c-subscript "a" "i")
                    "(a[i])")
    (error "test-c-subscript failed.")))
(define (test-c-deref)
  (unless (string=? (c-deref "x")
                    "(*x)")
    (error "test-c-deref failed.")))
(define (test-c-ref)
  (unless (string=? (c-ref "x")
                    "(&x)")
    (error "test-c-ref failed.")))
(define (test-c-->)
  (unless (string=? (c--> "pt" "x")
                    "(pt -> x)")
    (error "test-c--> failed.")))
(define (test-c-.)
  (unless (string=? (c-. "pt" "x")
                    "(pt . x)")
    (error "test-c-. failed.")))
(define (test-c-cast)
  (unless (string=? (c-cast "int" "5.0")
                    "((int) 5.0)")
    (error "test-c-cast failed.")))
(define (test-c-comma)
  (unless (string=? (c-comma "a" "b")
                    "(a , b)")
    (error "test-c-comma failed.")))
(define (test-c-cond)
  (unless (string=? (c-cond "a" "b" "c")
                    "(a ? b : c)")
    (error "test-c-cond failed.")))
(define (test-c-sizeof-var)
  (unless (string=? (c-sizeof-var "x")
                    "(sizeof x)")
    (error "test-c-sizeof-var failed.")))
(define (test-c-sizeof-type)
  (unless (string=? (c-sizeof-type "int")
                    "(sizeof (int))")
    (error "test-c-sizeof-type failed.")))

(define (test-c-log-and)
  (unless (string=? (c-log-and "a" "b")
                    "(a && b)")
    (error "test-c-log-and failed.")))
(define (test-c-log-or)
  (unless (string=? (c-log-or "a" "b")
                    "(a || b)")
    (error "test-c-log-or failed.")))
(define (test-c-!)
  (unless (string=? (c-! "p")
                    "(!p)")
    (error "test-c-! failed.")))

(define (test-c-<<)
  (unless (string=? (c-<< "a" "b")
                    "(a << b)")
    (error "test-c-<< failed.")))
(define (test-c->>)
  (unless (string=? (c->> "a" "b")
                    "(a >> b)")
    (error "test-c->> failed.")))
(define (test-c-~)
  (unless (string=? (c-~ "a")
                    "(~a)")
    (error "test-c-~ failed.")))
(define (test-c-bit-and)
  (unless (string=? (c-bit-and "a" "b")
                    "(a & b)")
    (error "test-c-bit-and failed.")))
(define (test-c-bit-or)
  (unless (string=? (c-bit-or "a" "b")
                    "(a | b)")
    (error "test-c-bit-or failed.")))
(define (test-c-bit-xor)
  (unless (string=? (c-bit-xor "a" "b")
                    "(a ^ b)")
    (error "test-c-bit-xor failed.")))

(define (test-c->)
  (unless (string=? (c-> "a" "b")
                    "(a > b)")
    (error "test-c-> failed.")))
(define (test-c->=)
  (unless (string=? (c->= "a" "b")
                    "(a >= b)")
    (error "test-c->= failed.")))
(define (test-c-==)
  (unless (string=? (c-== "a" "b")
                    "(a == b)")
    (error "test-c-== failed.")))
(define (test-c-!=)
  (unless (string=? (c-!= "a" "b")
                    "(a != b)")
    (error "test-c-!= failed.")))
(define (test-c-<=)
  (unless (string=? (c-<= "x" "5")
                    "(x <= 5)")
    (error "test-c-<= failed.")))
(define (test-c-<)
  (unless (string=? (c-< "a" "b")
                    "(a < b)")
    (error "test-c-< failed.")))

(define (test-c-+)
  (unless (string=? (c-+ "5" "7")
                    "(5 + 7)")
    (error "test-c-+ failed.")))
(define (test-c--)
  (unless (string=? (c-- "x" "y")
                    "(x - y)")
    (error "test-c-- failed.")))
(define (test-c-*)
  (unless (string=? (c-* "x" "y")
                    "(x * y)")
    (error "test-c-* failed.")))
(define (test-c-/)
  (unless (string=? (c-/ "x" "y")
                    "(x / y)")
    (error "test-c-/ failed.")))
(define (test-c-%)
  (unless (string=? (c-% "n" "2")
                    "(n % 2)")
    (error "test-c-% failed.")))

(define (test-c-pre-++)
  (unless (string=? (c-pre-++ "x")
                    "(++x)")
    (error "test-c-pre-++ failed.")))
(define (test-c-post-++)
  (unless (string=? (c-post-++ "x")
                    "(x++)")
    (error "test-c-post-++ failed.")))
(define (test-c-pre---)
  (unless (string=? (c-pre--- "x")
                    "(--x)")
    (error "test-c-pre--- failed.")))
(define (test-c-post---)
  (unless (string=? (c-post--- "x")
                    "(x--)")
    (error "test-c-post--- failed.")))
(define (test-c-unary-+)
  (unless (string=? (c-unary-+ "5")
                    "(+5)")
    (error "test-c-unary-+ failed.")))
(define (test-c-unary--)
  (unless (string=? (c-unary-- "5")
                    "(-5)")
    (error "test-c-unary-- failed.")))



(define (test-statements)
  (test-c-return)
  (test-c-break)
  (test-c-continue)
  (test-c-goto)
  (test-c-label)
  (test-c-for)
  (test-c-do-while)
  (test-c-while)
  (test-c-if)
  (test-c-switch))

(define (test-c-return)
  (unless (and (string=? (c-return "0")
                         "return 0")
               (string=? (c-return)
                         "return "))
    (error "test-c-return failed.")))
(define (test-c-break)
  (unless (string=? (c-break)
                    "break")
    (error "test-c-break failed.")))
(define (test-c-continue)
  (unless (string=? (c-continue)
                    "continue")
    (error "test-c-continue failed.")))
(define (test-c-goto)
  (unless (string=? (c-goto "lbl")
                    "goto lbl")
    (error "test-c-goto failed.")))
(define (test-c-label)
  (unless (string=? (c-label "lbl")
                    "lbl:")
    (error "test-c-label failed.")))
(define (test-c-for)
  (unless (string=? (c-for (c-= "i" "0") (c-<= "i" "10") (c-pre-++ "i")
                           (c-block (c-= "result" (c-+ "result" "i"))
                                    (c-call "printf" "\"%d %d\\n\"" "i" "result")))
                    "for ((i = 0); (i <= 10); (++i))\n{\n(result = (result + i));\nprintf(\"%d %d\\n\", i, result);\n};")
    (error "test-c-for failed.")))
(define (test-c-do-while)
  (unless (string=? (c-do-while (c-!= "x" "NULL") (c-block "x"))
                    "do\n{\nx;\n}\nwhile ((x != NULL));")
    (error "test-c-do-while failed.")))
(define (test-c-while)
  (unless (string=? (c-while (c-!= "x" "0") (c-block "x"))
                    "while ((x != 0))\n{\nx;\n};")
    (error "test-c-while failed.")))
(define (test-c-if)
  (unless (and (string=? (c-if (c-== "x" "0") (c-block "x") (c-block "y"))
                         "if ((x == 0))\n{\nx;\n}\nelse\n{\ny;\n}")
               (string=? (c-if (c-== "x" "0") (c-block "x"))
                         "if ((x == 0))\n{\nx;\n}")
               (string=? (c-if (c-== "x" "0") "x" "y")
                         "if ((x == 0))\nx;\nelse\ny;")
               (string=? (c-if (c-== "x" "0") "x")
                         "if ((x == 0))\nx;"))
    (error "test-c-if failed.")))
(define (test-c-switch)
  (unless (and (string=? (c-switch "x" #:default (c-program "5" "6") (list "3" "7") (list "5" "6" "3" (c-break)))
                         "switch (x)\n{\ncase 3:\n7;\ncase 5:\n6;\n3;\nbreak;\ndefault:\n5;\n6;\n}")
               (string=? (c-switch "x" (list "3" "7") (list "5" "6" "3" (c-break)))
                         "switch (x)\n{\ncase 3:\n7;\ncase 5:\n6;\n3;\nbreak;\ndefault:\n\n}"))
    (error "test-c-switch failed.")))

(run-tests)